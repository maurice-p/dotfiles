"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var tm = __importStar(require("vscode-textmate"));
var oniguruma = __importStar(require("vscode-oniguruma"));
var parsing_1 = require("./parsing");
exports.parseGrammarTestCase = parsing_1.parseGrammarTestCase;
function runGrammarTestCase(registry, testCase) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, registry
                    .loadGrammar(testCase.metadata.scope)
                    .then(function (grammar) {
                    if (!grammar) {
                        throw new Error("Could not load scope " + testCase.metadata.scope);
                    }
                    var assertions = toMap(function (x) { return x.sourceLineNumber; }, testCase.assertions);
                    var ruleStack = null;
                    var failures = [];
                    testCase.source.forEach(function (line, n) {
                        var _a = grammar.tokenizeLine(line, ruleStack), tokens = _a.tokens, ruleStack1 = _a.ruleStack;
                        ruleStack = ruleStack1;
                        if (assertions[n] !== undefined) {
                            var _b = assertions[n], testCaseLineNumber_1 = _b.testCaseLineNumber, scopeAssertions = _b.scopeAssertions;
                            scopeAssertions.forEach(function (_a) {
                                var from = _a.from, to = _a.to, requiredScopes = _a.scopes, excludedScopes = _a.exclude;
                                var xs = tokens.filter(function (t) { return from < t.endIndex && to > t.startIndex; });
                                if (xs.length === 0 && requiredScopes.length > 0) {
                                    failures.push({
                                        missing: requiredScopes,
                                        unexpected: [],
                                        actual: [],
                                        line: testCaseLineNumber_1,
                                        srcLine: n,
                                        start: from,
                                        end: to
                                    });
                                }
                                else {
                                    xs.forEach(function (token) {
                                        var unexpected = excludedScopes.filter(function (s) {
                                            return token.scopes.includes(s);
                                        });
                                        var missing = missingScopes_(requiredScopes, token.scopes);
                                        if (missing.length || unexpected.length) {
                                            failures.push({
                                                missing: missing,
                                                actual: token.scopes,
                                                unexpected: unexpected,
                                                line: testCaseLineNumber_1,
                                                srcLine: n,
                                                start: token.startIndex,
                                                end: token.endIndex
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    });
                    return failures;
                })];
        });
    });
}
exports.runGrammarTestCase = runGrammarTestCase;
function createRegistryFromGrammars(grammars) {
    var grammarIndex = {};
    for (var _i = 0, grammars_1 = grammars; _i < grammars_1.length; _i++) {
        var grammar = grammars_1[_i];
        var path = grammar.path, content = grammar.content;
        var rawGrammar = tm.parseRawGrammar(content, path);
        grammarIndex[rawGrammar.scopeName] = rawGrammar;
    }
    var wasmPath = require.resolve('vscode-oniguruma').replace(/main\.js$/, 'onig.wasm');
    var wasmBin = fs.readFileSync(wasmPath).buffer;
    var vscodeOnigurumaLib = oniguruma.loadWASM(wasmBin).then(function () {
        return {
            createOnigScanner: function (patterns) { return new oniguruma.OnigScanner(patterns); },
            createOnigString: function (s) { return new oniguruma.OnigString(s); }
        };
    });
    return new tm.Registry({
        onigLib: vscodeOnigurumaLib,
        loadGrammar: function (scopeName) {
            if (grammarIndex[scopeName] !== undefined) {
                return new Promise(function (fulfill, _) {
                    fulfill(grammarIndex[scopeName]);
                });
            }
            console.warn("grammar not found for \"" + scopeName + "\"");
            return null;
        }
    });
}
exports.createRegistryFromGrammars = createRegistryFromGrammars;
function createRegistry(grammarPaths) {
    return createRegistryFromGrammars(grammarPaths.map(function (path) {
        return {
            path: path,
            content: fs.readFileSync(path).toString()
        };
    }));
}
exports.createRegistry = createRegistry;
// ------------------------------------------------------------ helper functions --------------------------------------
function missingScopes_(rs, as) {
    var i = 0, j = 0;
    while (i < as.length && j < rs.length) {
        if (as[i] === rs[j]) {
            i++;
            j++;
        }
        else {
            i++;
        }
    }
    return j === rs.length ? [] : rs.slice(j);
}
exports.missingScopes_ = missingScopes_;
function toMap(f, xs) {
    return xs.reduce(function (m, x) {
        m[f(x)] = x;
        return m;
    }, {});
}
//# sourceMappingURL=index.js.map